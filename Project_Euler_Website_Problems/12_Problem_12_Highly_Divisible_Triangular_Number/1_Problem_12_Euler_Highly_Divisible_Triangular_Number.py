#! /usr/bin/env python3

"""
Jan 12, 2019  -  JLF

Highly divisible triangular number

Problem 12 

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

# ---------------------------------------------------------------------

def makeLine():
    print("");
    print("");
    print("------------------------------------------------------------");
    print("");
    print("");

# ---------------------------------------------------------------------

def numOfDiv(triNum):
    """ count the divisors for the number """

    divsTracker = 0
    
    for cnt1 in range(1, triNum+1):
        if ( triNum%cnt1 == 0 ):
            divsTracker = divsTracker + 1
            print("cnt1 => ", cnt1)

    return divsTracker

# ---------------------------------------------------------------------


def main():
    makeLine()

    triNum = 1
    addByNum = 1

    while ( triNum < 100 ):
        print("  triNum => ", triNum)
        print("addByNum => ", addByNum, end='');
        triNum = triNum + addByNum
        addByNum = addByNum + 1


    makeLine()


# ---------------------------------------------------------------------

main()





